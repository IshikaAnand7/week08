name: Frontend CI/CD - Clean

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'week08/frontend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'week08/frontend/**'

env:
  NODE_VERSION: '18'
  FRONTEND_PATH: 'week08/frontend'
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd ${{ env.FRONTEND_PATH }}
          echo "Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "No package.json found. Skipping install."

      - name: Run lint
        run: |
          cd ${{ env.FRONTEND_PATH }}
          if npm run lint --dry-run >/dev/null 2>&1; then
            npm run lint
          else
            echo "No lint script found"

      - name: Run tests
        run: |
          cd ${{ env.FRONTEND_PATH }}
          if npm run test --dry-run >/dev/null 2>&1; then
            npm run test
          else
            echo "No test script found"

  build-and-push:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          cd ${{ env.FRONTEND_PATH }}
          TAG="frontend-${{ env.IMAGE_TAG }}"
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/$TAG .
          docker push ${{ env.ACR_LOGIN_SERVER }}/$TAG

      - name: Logout from Azure
        run: az logout
        if: always()

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.CLUSTER_NAME }} \
            --overwrite-existing

      - name: Deploy Frontend
        run: |
          cd k8s
          IMAGE_TAG="frontend-${{ env.IMAGE_TAG }}"
          sed -i "s|latest|$IMAGE_TAG|g" frontend.yaml
          kubectl apply -f frontend.yaml

      - name: Logout from Azure
        run: az logout
        if: always()
#